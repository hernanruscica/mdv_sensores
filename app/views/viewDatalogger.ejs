
<%- include('partials/cabecera', {titulo: "MDV Sensores - Ver Datalogger", nombre: user.nombre_1, apellido: user.apellido_1}) %>
  

<div class="container my-5 py-3 " >
<% if (typeof user !== 'undefined' && user !== null && user.nombre_1 && user.apellido_1) { %>
    <h1>Perfil del datalogger X</h1>

    <!--Breadcrumb-->
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item">
          <a href="#" onclick="goBack()" >
            <i class="fas fa-arrow-left"></i> Volver
          </a>
        </li>   
        <li class="breadcrumb-item"><a href="/">Inicio</a></li>        
        <li class="breadcrumb-item"><a href="/users/dashboard">Panel de control</a></li> 
        <li class="breadcrumb-item"><a href="/locations/all">Ubicaciones</a></li>          
        <li class="breadcrumb-item"><a href="/dataloggers/all">Dataloggers</a></li>
        <li class="breadcrumb-item active" aria-current="page">Ver datalogger</li>
      </ol>
    </nav>
    <!-- Inicio de la Card info general-->
    <div class="card ">
      <div class="card-body row">
        <div class="col-sm-6 col-12 ">
          <!-- Foto -->
          <img src="/images/<%= datalogger.foto %>" class="card-img-top" style="width: 200px; height:auto;"
          alt="Foto del datalogger ">
        </div>
        <div class="col-sm-6 col-12  ">
          <!-- Nombre  -->
          <h5 class="card-title">
            <%= datalogger.nombre %>
          </h5>
          <!-- Descripcion -->
          <p class="card-text">
            <%= datalogger.descripcion %>
          </p>        
          <!-- Fecha de creacion -->
          <p class="card-text">Fecha de creacion: <%= datalogger.fecha_creacion %>
          </p>          
          <a href="/dataloggers/editform/<%= datalogger.id %>" class="btn btn-secondary col-6 col-lg-6">Editar Datalogger</a>               
        </div>
        
      </div>
    </div>
    <!-- Fin de la Card info general-->
  <div class="d-flex flex-column flex-lg-row ">   

    <% if (channels.length> 0) { 
       channels.forEach(channel=> { %>
        <!-- Principio de la Card de 1 canal analogico o digital-->
        <div class="card mt-2 col-12 col-lg-6">
          <div class="card-body">
            <h5 class="card-title">
              Canal <%= (channel.nombre_columna.startsWith('a')) ? 'analogico' : 'digital' %> #<%= channel.nombre_columna %> "<em><%= channel.canal_nombre %></em>"
            </h5>    
            <p class="card-text">
              <%= channel.canal_descripcion %>
            </p>
            <!-- Ejemplo de id para los graficos 'chart_a1 o chart_d1' -->
            <div id="chart_<%= channel.nombre_columna %>"></div>  
            <p class="card-text">
              <!-- //`chart_${currentChannel.nombre_columna}` a1_alarm_max a1_alarm_min a1_max_value a1_min_value  -->
              Ultimas 24Hs. <br>
              Valor MAX: <strong><span id="<%= channel.nombre_columna %>_max_value"></span></strong> -  Valor MIN: <strong><span id="<%= channel.nombre_columna %>_min_value">></span></strong> <br>           
              Alarmas MAX: <span id="<%= channel.nombre_columna %>_alarm_max"></span> - MIN: <span id="<%= channel.nombre_columna %>_alarm_min"></span> <br>   
              <a href="/dataloggers/view/<%= datalogger.id %>/channels/<%= channel.canal_id %>" class="btn btn-secondary mt-3">Ver y/o editar canal y alarmas</a>               
            </p>
          </div>
        </div>
        <!-- Fin  de la Card de 1 canal analogico o digital-->
        <% }); %>
    <% } else { %>
      <p>No tiene canales asociados.</p>
      <% } %>   
  </div>   
  <% } else { %>
    <h1>Error: datalogger no encontrado</h1>
  <% } %>
</div>
 

    
<%- include('partials/piedepagina') %>        
  <!-- Incluye ApexCharts.js -->
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>
  // Función para ir a la página anterior
  function goBack() {
    window.history.back();
  }

  const channels = <%- JSON.stringify(channels || []) %>;
  const channelsData= <%- JSON.stringify(channelsData || []) %>; 
  
  //console.log(channelsData[1]);

  const showAnalogCard = (currentChannel, dataChannel) => {  
    /* Preparacion de datos   para mostrar datos analogicos  */
    const myFactor = parseFloat(currentChannel.multiplicador);
    const myTimeStamps = dataChannel.map(data => data.fecha_local);
    const valuesInst = dataChannel.map(data => (data.inst * myFactor).toFixed(2));      
    const valuesMax = dataChannel.map(data => (data.max * myFactor).toFixed(2));
    const valuesMin = dataChannel.map(data => (data.min * myFactor).toFixed(2));         
    const $maxValue = document.getElementById(`${currentChannel.nombre_columna}_max_value`); 
    const $minValue = document.getElementById(`${currentChannel.nombre_columna}_min_value`);
    const $alarmMax = document.getElementById(`${currentChannel.nombre_columna}_alarm_max`);
    const $alarmMin = document.getElementById(`${currentChannel.nombre_columna}_alarm_min`);
    $maxValue.innerHTML = Math.max(...valuesMax);
    $minValue.innerHTML = Math.min(...valuesMin);
    $alarmMax.innerHTML = 50;
    $alarmMin.innerHTML = 30;

    
      
    // Datos del gráfico
    var options = { 
        title: {
        text : currentChannel.canal_nombre
        },
      chart: {
        type: 'line',
        height: 300,
        width: "100%",
        background: '#f4f4f4',          
      },
      
      series: [        
      {       
        name: "Maxima",
        data: valuesMax,
        color: '#e29578'
      },
      {       
        name: "Promedio",
        data: valuesInst,
        color: '#83c5be'
      },        
      {       
        name: "Minima",
        data: valuesMin,
        color: '#006d77'
      }
      ],
      xaxis: {
        categories: myTimeStamps,
        type: 'datetime'
      },
      stroke: {
      show: true,
      curve: 'straight',
      lineCap: 'butt',
      colors: undefined,
      width: 1,
      dashArray: 0, 
    },
    tooltip: {
      x: {
        show: true,
        format: 'dd/MMM - hh:mm ',
        formatter: undefined,
    }
    }
    }  
    // Inicializar el gráfico chart_a1
    const idNameChart = `chart_${currentChannel.nombre_columna}`;
    var chart = new ApexCharts(document.getElementById(idNameChart), options);  

    // Renderizar el gráfico      
    chart.render();
  }


  const showDigitalCard = (currentChannel, dataChannel) => {  
    /* Preparacion de datos   para mostrar datos analogicos  */
    //const myFactor = parseFloat(currentChannel.multiplicador);
    const myTimeStamps = dataChannel.map(data => data.fecha_local);
    console.log(myTimeStamps);

    
    
    const valuesCantidad = dataChannel.map(data => data.cantidad); 
    const valuesEnergia = dataChannel.map(data => data.energia)
    const valuesEstado = dataChannel.map(data => data.estado);                  
    const valuesServicio = dataChannel.map(data => data.servicio);                  
    const valuesTiempo = dataChannel.map(data => data.tiempo);
    const valuesTiempoTotal = dataChannel.map(data => data.tiempo_total);   

    
    const $maxValue = document.getElementById(`${currentChannel.nombre_columna}_max_value`); 
    const $minValue = document.getElementById(`${currentChannel.nombre_columna}_min_value`);
    const $alarmMax = document.getElementById(`${currentChannel.nombre_columna}_alarm_max`);
    const $alarmMin = document.getElementById(`${currentChannel.nombre_columna}_alarm_min`);

    

    $maxValue.innerHTML = Math.max(...valuesTiempo);
    $minValue.innerHTML = Math.min(...valuesTiempo);
    $alarmMax.innerHTML = 50;
    $alarmMin.innerHTML = 30;

    const now = new Date() ;
    const currentTime = new Date(now.getTime() - (60 * 60 * 1000 * 3));
    // Calcular la hora una hora atrás
    const oneHourAgo = new Date(now.getTime() - (60 * 60 * 1000 * 4));    

    // Convertir las fechas a formato ISO 8601
    const nowISOString = currentTime.toISOString();
    const oneHourAgoISOString = oneHourAgo.toISOString();

    // Encontrar el índice de la última marca de tiempo menor o igual a la hora actual
    const lastIndexBeforeNow = myTimeStamps.findLastIndex(timestamp => timestamp <= nowISOString);

    // Encontrar el índice de la primera marca de tiempo mayor que la hora una hora atrás
    const firstIndexAfterOneHourAgo = myTimeStamps.findIndex(timestamp => timestamp > oneHourAgoISOString);


    // Filtrar myTimeStamps para obtener los datos entre la hora actual y una hora atrás
    const myTimeStampsOneHour = myTimeStamps.slice(firstIndexAfterOneHourAgo, lastIndexBeforeNow + 1);
    //valuesTiempo
    const myValuesOneHour = valuesTiempo.slice(firstIndexAfterOneHourAgo, lastIndexBeforeNow + 1);
    //console.log(nowISOString, oneHourAgoISOString, myTimeStampsOneHour);
    
    // Datos del gráfico
    var options = { 
        title: {
        text : currentChannel.canal_nombre
        },
      chart: {
        type: 'line',
        height: 300,
        width: "100%",
        background: '#f4f4f4',          
      },
      
      series: [        
      {       
        name: "Tiempo de encendido",
        data: myValuesOneHour,
        color: '#e29578'
      }
      ],
      xaxis: {
      categories: myTimeStampsOneHour,
      type: 'datetime'      
  },
      stroke: {
      show: true,
      curve: 'straight',
      lineCap: 'butt',
      colors: undefined,
      width: 1,
      dashArray: 0, 
    },
    tooltip: {
      x: {
        show: true,
        format: 'dd/MMM - hh:mm ',
        formatter: undefined,
    }
    }
    }  
    // Inicializar el gráfico chart_a1
    const idNameChart = `chart_${currentChannel.nombre_columna}`;
    var chart = new ApexCharts(document.getElementById(idNameChart), options);  

    // Renderizar el gráfico      
    chart.render();
  }

  const channelsQty = channels.length;

  if (channels.length > 0){
    for (let i = 0; i < channelsQty; i++){      
      if (channels[i].nombre_columna.startsWith('a')){      
        console.log(`Canal analogico: ${channels[i].nombre_columna}`);   
        showAnalogCard(channels[i], channelsData[i].data);
      }else {
        console.log(`Canal digital: ${channels[i].nombre_columna}`); 
        showDigitalCard(channels[i], channelsData[i].data);
      }
    }
  }else{
    console.log("No tiene canales asociados al datalogger");
  }
</script>
    
</body>
</html>

